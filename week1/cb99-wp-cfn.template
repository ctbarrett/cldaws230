{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "This stack will provision a redundant wordpress installation spanning multiple AZ's, using an auto-scaling group, launch configuration, and elastic load balancer for the wordpress EC2 instances, and RDS for the backend database. Custom AMIs available in us-east-1 and us-west-2",

  "Metadata" : {
    "Version" : "0.2.7"
  },

  "Parameters" : {
    "WPInstanceType" : {
      "Description" : "Enter desired instance type for WP nodes; default is t2.micro",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large" ]
    },

    "WPInstanceCount" : {
      "Description" : "Enter desired number of WP instances for auto-scaling group (0-5); default is 1",
      "Type" : "Number",
      "Default" : "1",
      "MinValue" : "0",
      "MaxValue" : "5"
    },

    "AdminIP" : {
      "Description" : "The IP address range that can be used to SSH to the EC2 instances",
      "Type" : "String",
      "MinLength" : "9",
      "MaxLength" : "18",
      "Default" : "0.0.0.0/0",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription" : "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "ClientIP" : {
      "Description" : "The IP address range for external clients accessing the blog (used to limit access for testing)",
      "Type" : "String",
      "MinLength" : "9",
      "MaxLength" : "18",
      "Default" : "0.0.0.0/0",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription" : "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "DBAdminUser" : {
      "Description" : "Enter database admin user account; default is 'wpdbadm'",
      "Type" : "String",
      "Default" : "wpmysqldbadm",
      "MinLength" : "1",
      "MaxLength" : "16",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },

    "DBAdminPassword" : {
      "Description" : "Enter database admin password",
      "Type" : "String",
      "NoEcho" : "true",
      "MinLength" : "8",
      "MaxLength" : "41",
      "AllowedPattern" : "[a-zA-Z0-9]*",
      "ConstraintDescription" : "must contain only alphanumeric characters."
    },

    "DBInstanceType" : {
      "Description" : "Enter desired instance type for DB nodes; default is 'db.t2.micro'",
      "Type" : "String",
      "Default" : "db.t2.micro",
      "AllowedValues" : [ "db.t2.micro", "db.t2.small", "db.t2.medium", "db.t2.large" ],
      "ConstraintDescription" : "must select a valid database instance type."
    },

    "DBName" : {
      "Description" : "The WordPress database name",
      "Type" : "String",
      "Default" : "wordpressdb",
      "MinLength" : "1",
      "MaxLength" : "64",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },

    "DBSize" : {
      "Description" : "The size of the database",
      "Type": "Number",
      "Default": "5",
      "MinValue": "5",
      "MaxValue": "15",
      "ConstraintDescription" : "must be between 5 and 15Gb."
    },

    "IsMultiAZ" : {
      "Description" : "Select whether RDS database should use multiple availability zones",
      "Type": "String",
      "Default" : "false",
      "AllowedValues" : [ "true", "false" ],
      "ConstraintDescription" : "must be true or false."
    },

    "IsMultiRegion" : {
      "Description" : "Select whether RDS database should use multiple regions",
      "Type": "String",
      "Default" : "false",
      "AllowedValues" : [ "true", "false" ],
      "ConstraintDescription" : "must be true or false."
    }
  },

  "Mappings" : {
    "AWSRegion2AMI" : {
      "us-east-1" : {"ImageId": "ami-580a0232"},
      "us-west-2" : {"ImageId": "ami-bdf808dd"}
    },
    "AWSRegion2SSHKey" : {
      "us-east-1" : {"SSHKey": "cb99-aws"},
      "us-west-2" : {"SSHKey": "cb99-w2"}
    }
  },

  "Resources" : {

    "WPELBSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable external HTTP access via port 80 to the ELB",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : { "Ref": "ClientIP" } }
        ]
      }
    },

    "WPElasticLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "AvailabilityZones" : { "Fn::GetAZs" : "" },
        "CrossZone" : "true",
        "LBCookieStickinessPolicy" : [ {
          "PolicyName" : "CookieBasedPolicy",
          "CookieExpirationPeriod" : "30"
        } ],
        "Listeners" : [ {
          "LoadBalancerPort" : "80",
          "InstancePort" : "80",
          "Protocol" : "HTTP",
          "PolicyNames" : [ "CookieBasedPolicy" ]
        } ],
        "HealthCheck" : {
          "Target" : "HTTP:80/wordpress/wp-admin/install.php",
          "HealthyThreshold" : "2",
          "UnhealthyThreshold" : "5",
          "Interval" : "10",
          "Timeout" : "5"
        },
        "SecurityGroups": [
          {"Fn::GetAtt": [ "WPELBSecurityGroup", "GroupId" ]}
        ]
      }
    },

    "WPAutoScalingGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : { "Fn::GetAZs" : "" },
        "LaunchConfigurationName" : { "Ref" : "WPLaunchConfig" },
        "MinSize" : "1",
        "MaxSize" : "5",
        "DesiredCapacity" : { "Ref" : "WPInstanceCount" },
        "LoadBalancerNames" : [ { "Ref" : "WPElasticLoadBalancer" } ]
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT15M"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime" : "PT15M"
        }
      }
    },

    "WPInstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP access via port 80 locked down to the load balancer + SSH access",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "SourceSecurityGroupOwnerId" : {"Fn::GetAtt" : ["WPElasticLoadBalancer", "SourceSecurityGroup.OwnerAlias"]}, "SourceSecurityGroupName" : {"Fn::GetAtt" : ["WPElasticLoadBalancer", "SourceSecurityGroup.GroupName"]}},
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "AdminIP"}}
        ]
      }
    },

    "WPLaunchConfig": {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "wordpress_setup" : ["install_cfn", "add_yum_cron", "configure_wordpress"]
          },
          "install_cfn" : {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": { "Fn::Join": [ "", [
                  "[main]\n",
                  "stack=", { "Ref": "AWS::StackId" }, "\n",
                  "region=", { "Ref": "AWS::Region" }, "\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": { "Fn::Join": [ "", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                          "         --stack ", { "Ref" : "AWS::StackName" },
                          "         --resource LaunchConfig ",
                          "         --configsets add_yum_cron configure_wordpress ",
                          "         --region ", { "Ref" : "AWS::Region" }, "\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              }
            }
          },
          "configure_yum_updates" : {
            "files" : {
              "/etc/cron.daily/yum-security-updates" : {
                "content" : { "Fn::Join" : [ "", [
                  "#!/bin/bash\n",
                  "/usr/bin/yum -y update --security\n"
                ]]},
                "mode" : "000755",
                "owner" : "root",
                "group" : "root"
              }
            }
          },

          "configure_wordpress" : {
            "files" : {
              "/tmp/update-wp-config" : {
                "content" : { "Fn::Join" : [ "", [
                  "#!/bin/bash\n",
                  "sed -i \"s/'database_name_here'/'",{ "Ref" : "DBName" }, "'/g\" wp-config.php\n",
                  "sed -i \"s/'username_here'/'",{ "Ref" : "DBAdminUser" }, "'/g\" wp-config.php\n",
                  "sed -i \"s/'password_here'/'",{ "Ref" : "DBAdminPassword" }, "'/g\" wp-config.php\n",
                  "sed -i \"s/'localhost'/'",{ "Fn::GetAtt" : [ "DBInstance", "Endpoint.Address" ] }, "'/g\" wp-config.php\n"
                ]]},
                "mode" : "000500",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "configure_wordpress" : {
                "command" : "/tmp/update-wp-config",
                "cwd" : "/var/www/html/wordpress"
              }
            },
            "services" : {
              "sysvinit" : {
                "httpd" : { "enabled" : "true", "ensureRunning" : "true" }
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegion2AMI", { "Ref" : "AWS::Region" }, "ImageId"]},
        "InstanceType"   : { "Ref" : "WPInstanceType" },
        "SecurityGroups" : [{"Fn::GetAtt" : [ "WPInstanceSecurityGroup", "GroupId" ] }],
        "KeyName"        : { "Fn::FindInMap" : [ "AWSRegion2SSHKey", { "Ref" : "AWS::Region" }, "SSHKey" ]}
      }
    },

    "DBSecurityGroup": {
      "Type": "AWS::RDS::DBSecurityGroup",
      "Properties" : {
        "GroupDescription": "Open database for access by WP instances",
        "DBSecurityGroupIngress" : {
          "EC2SecurityGroupName" : { "Ref" : "WPInstanceSecurityGroup" }
        }
      }
    },

    "DBInstance" : {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "DBName"            : { "Ref" : "DBName" },
        "Engine"            : "MySQL",
        "MultiAZ"           : { "Ref": "IsMultiAZ" },
        "MasterUsername"    : { "Ref" : "DBAdminUser" },
        "MasterUserPassword": { "Ref" : "DBAdminPassword" },
        "DBInstanceClass"   : { "Ref" : "DBInstanceType" },
        "AllocatedStorage"  : { "Ref" : "DBSize" },
        "DBSecurityGroups": [{ "Ref": "DBSecurityGroup" }]
      }
    }
  },

  "Outputs" : {
    "WPElasticLoadBalancerDNSName" : {
      "Description": "The DNSName of the load balancer",
      "Value" : { "Fn::GetAtt" : [ "WPElasticLoadBalancer", "DNSName" ]}
    }
  }

}
