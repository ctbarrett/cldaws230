{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "This stack will provision a redundant wordpress infrastructure",

  "Parameters": {

    "SiteID": {
      "Description": "Site Identifier",
      "Type": "String",
      "Default": "cb99",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9-_]*",
      "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters, hyphens or underscores."
    },

    "SiteAdminUser": {
      "Description": "Enter admin user account; default is 'ljenkins'",
      "Type": "String",
      "Default": "ljenkins",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
    },

    "SiteAdminPassword": {
      "Description": "Enter admin password",
      "Type": "String",
      "Default": "supersecret",
      "NoEcho": "true",
      "MinLength": "8",
      "MaxLength": "41",
      "AllowedPattern": "[a-zA-Z0-9-_!@#$%^&*()\\.,]+",
      "ConstraintDescription": "must contain only characters in the class: [a-zA-Z0-9-_!@#$%^&*()\\.,]"
    },

    "AdminIP": {
      "Description": "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "50.181.212.118/32",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "ClientIP": {
      "Description": "The IP address range for external clients accessing the blog (used to limit access for testing)",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "50.181.212.118/32",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "VPC": {
      "Description": "vpc-id for the VPC for this app/environment",
      "Type": "AWS::EC2::VPC::Id",
      "ConstraintDescription": "Must be a valid VPC"
    },

    "PrivateSubnets": {
      "Description": "List of private subnets to use for RDS EC2 instances",
      "Type": "List<AWS::EC2::Subnet::Id>"
    },

    "PublicSubnets": {
      "Description": "List of public subnets to use for Wordpress EC2 instances",
      "Type": "List<AWS::EC2::Subnet::Id>"
    },

    "WebServerInstanceType": {
      "Description": "Enter desired instance type for WP nodes; default is t2.micro",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": ["t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large"]
    },

    "WebServerCount": {
      "Description": "Enter desired number of WP instances for auto-scaling group (1-5); default is 2",
      "Type": "Number",
      "Default": "1",
      "MinValue": "1",
      "MaxValue": "5"
    },

    "SSHKey": {
      "Description": "The name of an EC2 SSH keypair to login to WP EC2 instances. Should be available in all regions",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "cb99",
      "ConstraintDescription": "Must be a valid EC2 KeyPair"
    },

    "DBInstanceType": {
      "Description": "Enter desired instance type for DB nodes; default is 'db.t2.micro'",
      "Type": "String",
      "Default": "db.t2.micro",
      "AllowedValues": ["db.t2.micro", "db.t2.small", "db.t2.medium", "db.t2.large"],
      "ConstraintDescription": "must select a valid database instance type."
    },

    "DBSize": {
      "Description": "The size of the database",
      "Type": "Number",
      "Default": "5",
      "MinValue": "5",
      "MaxValue": "15",
      "ConstraintDescription": "must be between 5 and 15Gb."
    },

    "DBBackupRetention": {
      "Description": "The number of database backups to keep",
      "Type": "Number",
      "Default": "1",
      "MinValue": "1",
      "MaxValue": "35",
      "ConstraintDescription": "Must be a valid number between 1-35 days"
    }
  },

  "Mappings": {
    "RegionMap": {
      "us-west-2": {
        "ImageId": "ami-f303fb93"
      },

      "us-east-1": {
        "ImageId": "ami-a4827dc9"
      }
    }
  },

  "Resources": {

    "ELBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "GroupDescription": "Enable external HTTP access via port 80 to the ELB",
        "SecurityGroupIngress": [
          {"IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": {"Ref": "ClientIP"}}
        ],
        "Tags": [{
          "Key": "Name",
          "Value": {"Fn::Join": ["-", ["sg", {"Ref": "SiteID"}, "elb"]]}
        }]
      }
    },

    "WebServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "GroupDescription": "Enable HTTP access via port 80 locked down to the load balancer + SSH access",
        "SecurityGroupIngress": [
          {"IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "SourceSecurityGroupId": {"Ref": "ELBSecurityGroup"}},
          {"IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": {"Ref": "ClientIP"}},
          {"IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": {"Ref": "AdminIP"}}
        ],
        "Tags": [{
          "Key": "Name",
          "Value": {"Fn::Join": ["-", ["sg", {"Ref": "SiteID"}, "web"]]}
        }]
      }
    },

    "DBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "GroupDescription": "Open database for access by WP instances",
        "SecurityGroupIngress": [
          {"IpProtocol": "tcp", "FromPort": "3306", "ToPort": "3306", "SourceSecurityGroupId": {"Ref": "WebServerSecurityGroup"}}
        ],
        "Tags": [{
          "Key": "Name",
          "Value": {"Fn::Join": ["-", ["sg", {"Ref": "SiteID"}, "rds"]]}
        }]
      }
    },

    "DBSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "List of subnets to use for RDS instances",
        "SubnetIds": {"Ref": "PrivateSubnets"},
        "Tags": [{
          "Key": "Name",
          "Value": {"Fn::Join": ["-", ["sng", {"Ref": "SiteID"}, "rds"]]}
        }]
      }
    },

    "DBInstance": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "DBName": "wordpress",
        "DBInstanceIdentifier": {"Ref": "SiteID"},
        "MasterUsername": {"Ref": "SiteAdminUser"},
        "MasterUserPassword": {"Ref": "SiteAdminPassword"},
        "MultiAZ": "true",
        "Engine": "MySQL",
        "StorageType": "gp2",
        "AllocatedStorage": {"Ref": "DBSize"},
        "BackupRetentionPeriod": {"Ref": "DBBackupRetention"},
        "DBInstanceClass": {"Ref": "DBInstanceType"},
        "DBSubnetGroupName": {"Ref": "DBSubnetGroup"},
        "VPCSecurityGroups": [{"Fn::GetAtt": ["DBSecurityGroup", "GroupId"]}],
        "Tags": [{
          "Key": "Name",
          "Value": {"Fn::Join": ["-", ["rds", {"Ref": "SiteID"}, "db"]]}
        }]
      }
    },

    "LaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "packages": {
              "yum": {
                "php": [],
                "php-mysql": [],
                "mysql": [],
                "httpd": []
              }
            },
            "sources": {
              "/var/www/html": "https://wordpress.org/latest.tar.gz"
            },
            "files": {
              "/etc/cron.daily/yum-security-updates": {
                "content": {"Fn::Join": ["", [
                  "#!/bin/bash\n",
                  "/usr/bin/yum -y update --security\n"
                ]]},
                "mode": "000755",
                "owner": "root",
                "group": "root"
              },
              "/root/configure_wp.sh": {
                "content": {"Fn::Join": ["", [
                  "#!/bin/bash\n",
                  "cp wp-config-sample.php wp-config.php\n",
                  "sed -i \"s/'database_name_here'/'", "wordpress", "'/g\" wp-config.php\n",
                  "sed -i \"s/'username_here'/'", {"Ref": "SiteAdminUser"}, "'/g\" wp-config.php\n",
                  "sed -i \"s/'password_here'/'", {"Ref": "SiteAdminPassword"}, "'/g\" wp-config.php\n",
                  "sed -i \"s/'localhost'/'", {"Fn::GetAtt": ["DBInstance", "Endpoint.Address"]}, "'/g\" wp-config.php\n"
                ]]},
                "mode": "000500",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/cfn-hup.conf": {
                "content": { "Fn::Join": [ "", [
                  "[main]\n",
                  "stack=", { "Ref": "AWS::StackId" }, "\n",
                  "region=", { "Ref": "AWS::Region" }, "\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {"Fn::Join": ["", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                  " --stack ", { "Ref" : "AWS::StackName" },
                  " --region ", { "Ref" : "AWS::Region" },
                  " --resource LaunchConfig ",
                  "\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands": {
              "01_mv_files": {
                "command": "mv * ../",
                "cwd": "/var/www/html/wordpress"
              },
              "02_rm_tmp_dir": {
                "command": "rm -r /var/www/html/wordpress"
              },
              "configure_wp": {
                "command": "/root/configure_wp.sh",
                "cwd": "/var/www/html"
              }
            },
            "services": {
              "sysvinit": {
                "httpd": {"enabled": "true", "ensureRunning": "true"}
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {"Fn::FindInMap": ["RegionMap", {"Ref": "AWS::Region"}, "ImageId"]},
        "InstanceType": {"Ref": "WebServerInstanceType" },
        "SecurityGroups": [{"Fn::GetAtt": ["WebServerSecurityGroup", "GroupId"]}],
        "KeyName": {"Ref": "SSHKey"},
        "UserData": {"Fn::Base64": {"Fn::Join": ["", [
          "#!/usr/bin/env bash\n",
          "yum update -y aws-cfn-bootstrap\n",

          "/opt/aws/bin/cfn-init -v ",
          " --stack ", {"Ref": "AWS::StackName"},
          " --region ", {"Ref": "AWS::Region"},
          " --resource LaunchConfig ",
          "\n",

          "/opt/aws/bin/cfn-signal -e $? ",
          " --stack ", {"Ref": "AWS::StackName"},
          " --region ", {"Ref": "AWS::Region"},
          " --resource AutoScalingGroup",
          "\n"
        ]]}}
      }
    },

    "LoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Subnets": {"Ref": "PublicSubnets"},
        "LoadBalancerName": {"Ref": "SiteID"},
        "CrossZone": "true",
        "Listeners": [{
          "InstancePort": "80",
          "InstanceProtocol": "HTTP",
          "LoadBalancerPort": "80",
          "Protocol": "HTTP"
        }],
        "HealthCheck": {
          "Target": "HTTP:80/index.php",
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "2",
          "Interval": "5",
          "Timeout": "3"
        },
        "SecurityGroups": [
          {"Fn::GetAtt": ["ELBSecurityGroup", "GroupId"]}
        ],
        "Tags": [{
          "Key": "Name",
          "Value": {"Fn::Join": ["-", ["elb", {"Ref": "SiteID"}]]}
        }]
      }
    },

    "AutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": {"Ref": "PublicSubnets"},
        "LaunchConfigurationName": {"Ref": "LaunchConfig"},
        "MinSize": "1",
        "MaxSize": "5",
        "DesiredCapacity": {"Ref": "WebServerCount"},
        "LoadBalancerNames": [{"Ref": "LoadBalancer"}]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT15M"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "2",
          "PauseTime": "PT15M"
        }
      }
    }
  },

  "Outputs": {
  }

}
